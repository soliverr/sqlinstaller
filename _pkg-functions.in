# pkgs-functions
#
#  Actions of packet.
#
#    Global `DISTR', `ACTION' environment variables can be set
#     or
#    Two parameters `distr' `action' should be supplied for every procedures
#   

# Debug
#set -x -v

# Package identification ---------------------------------------------------------------
PACKAGE_NAME="@PACKAGE_NAME@"
PACKAGE_TARNAME="@PACKAGE_TARNAME@"
PACKAGE_VERSION="@PACKAGE_VERSION@"
PACKAGE_STRING="@PACKAGE_STRING@"

# Base directories ---------------------------------------------------------------------
prefix=@prefix@
exec_prefix=@exec_prefix@
sbindir=@sbindir@
liblsb=@liblsb@
libdir=@libdir@
libexecdir=@libexecdir@
sysconfdir=@sysconfdir@
confdir=@confdir@
localstatedir=@localstatedir@
datarootdir=@datarootdir@
datadir=@datadir@
logdir=@logdir@
spooldir=@spooldir@
docdir=@docdir@

source $liblsb/oraclebase-functions

db_install() {
    $sbindir/dba_sqlinstaller $datadir/install.sql || return $?
    return 0
}

db_uninstall() {
    $sbindir/dba_sqlinstaller $datadir/uninstall.sql || return $?
    return 0
}

db_upgrade() {
    $sbindir/dba_sqlinstaller $datadir/install.sql || return $?
    return 0
}

install() {
    orabase_info "Installation phase"
    db_install
    return $?
}

uninstall() {
    orabase_info "Uninstallation phase"
    db_uninstall
    return $?
}

upgrade() {
    orabase_info "Upgrade phase. Versions: installed $1, current $PACKAGE_VERSION"
    db_upgrade
    return $?
}

# summary of how this script can be called:
#        * <new-preinst> `install'
#        * <new-preinst> `install' <old-version>
#        * <new-preinst> `upgrade' <old-version>
#        * <old-preinst> `abort-upgrade' <new-version>
#
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
preinst() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}

    case "$action" in
        install)
        ;;
        upgrade)
        ;;
        abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        null)
            exit 0
        ;;
        *)
            echo "preinst called with unknown argument \`$@'" >&2
            exit 1
        ;;
    esac
}

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
postinst() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}
    local version=$3

    [ "$action" = "configure" -a -n "$version" ] && action="upgrade"

    case "$action" in
        configure)
            install || exit $?
        ;;
        upgrade)
            upgrade "$version" || exit $?
        ;;
        abort-upgrade|abort-remove|abort-deconfigure)
        ;;
        null)
            exit 0
        ;;
        *)
            echo "postinst called with unknown argument \`$@'" >&2
            exit 1
        ;;
    esac
}

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see /usr/doc/packaging-manual/
prerm() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}
    local version=$3

    case "$action" in
     remove)
      if [ -z "$vesrion" ] ; then
        uninstall || exit $?
      fi
     ;;
     upgrade|deconfigure)
     ;;
     failed-upgrade)
     ;;
     *)
         echo "prerm called with unknown arguments \`$@'" >&2
         exit 0
     ;;
 esac
}

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
postrm() {
    local distr=${1:-$DISTR}
    local action=${2:-$ACTION}
    local version=$3

    case "$action" in
        remove)
        ;;
        purge)
        ;;
        upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
        ;;
        null)
            exit 0
        ;;
        *)
            echo "postrm called with unknown arguments \`$@'" >&2
            exit 1
        ;;
    esac
}
